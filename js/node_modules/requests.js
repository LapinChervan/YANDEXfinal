/**
*    -----МОДУЛЬ REQUESTS-----
* --ОБРАБОТКА ЗАПРОСОВ С КЛИЕНТА--
*/

var newUser = require('user'),
    util = require('util'),
    mongodb = require('mongodb'),
    crypto = require('crypto'),
    db = new mongodb.Db('exampleDb', new mongodb.Server('localhost', 27017, {}), {safe: true}),
    requests;

requests = (function() {
    /**
    * Регистрация нового пользователя.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {String} password Пароль пользователя.
    * @param {Response} res Ответ сервера.
    */
	function reg(user, password, res) {
		db.open(function(err, db) {
			if (!err) {
				db.createCollection('users', function(err, collection) {
                    if (!err) {
                        collection.findOne({name: user}, function(err, docs) {
                            if (!err && docs === null) {
                                collection.insert(new newUser(user,
                                    crypto.createHash('md5').update(password).digest('hex')),
                                    function(err, result) {
                                        if (!err) {
                                            db.close();
                                            res.end('0');
                                        }
                                });
                            }
                            else {
                                db.close();
                                res.end('1');
                            }
                        });
                    }
                });
            }
        });
    }

    /**
    * Авторизация пользователя.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {String} password Пароль пользователя.
    * @param {Int} start Время в миллисекундах 01 числа, текущего месяца.
    * @param {Int} end Время в миллисекундах 30 числа, текущего месяца.
    * @param {Response} res Ответ сервера в JSON (история операций за месяц)
    */
    function auth (user, password, start, end, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function (err, collection) {
                    if (!err) {
                        collection.findOne({ name: user, password: crypto.createHash('md5').update(password).digest('hex') },
                            {fields: { total: 0, password: 0, _id: 0} },
                            function(err, docs) {
                                if (!err && docs != null) {
                                    var date = new Date(),
                                        session = crypto.createHash('md5').update(user + password + Date.parse(new Date())).digest("hex");

                                    date.setTime(date.getTime() + (7 * 24 * 60 * 60 * 1000));
                                    db.close();

                                    createSession(user, session);

                                    res.writeHead(200, {'Content-Type': 'text/html; charset=UTF-8',
                                        'Set-Cookie': 'controls=' + session +
                                                      ';path=/;expires=' + date.toGMTString() +
                                                      ';HttpOnly'
                                    });

                                    docs.history = dateFilter(undefined, start, end, undefined, docs);
                                    res.end(JSON.stringify(docs));
                                }
                                else {
                                    db.close();
                                    res.end('0');
                                }
                        });
                    }
                });
            }
        });
    }

    /**
    * Добавление в новой категории.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {String} type Тип добавляемой категории (accounts / gain / costs.
    * @param {String} cat Название категории.
    * @param {Response} res Ответ сервера в JSON ( {"тип": "тип", "катег": "катег"}).
    */
    function newCat(user, type, cat, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$addToSet: getObj('categories.' + type, cat)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.end(JSON.stringify({
                                        "type": type,
                                        "cat": cat
                                    }));
                                }
                            });
                    }
                });
            }
        });
    }

    /**
    * Редактирование категории.
    *
    * @param {Object} data Объект с данными (логин, тип категории, старая, новая).
    * @param {Response} res Ответ сервера в JSON ( {"тип": "тип", "старая": "старая", "новая": "новая"}).
    */
    function renameCat(data, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: data.login},
                            {$pull: getObj('categories.' + data.type, data.old)},
                            function(err, result) {
                                if (!err) {
                                    collection.update({name: data.login},
                                        {$addToSet: getObj('categories.' + data.type, data.new)},
                                        function(err, result) {
                                            if (!err) {
                                                db.close();
                                                res.end(JSON.stringify({
                                                    "type": data.type,
                                                    "oldName": data.old,
                                                    "newName": data.new
                                                }));
                                            }
                                        });
                                }
                            });
                    }
                });
            }
        });
    }

    /**
    * Удаление категории.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {String} type Тип удаляемой категории (accounts / gain / costs.
    * @param  {String} cat Название категории.
    * @param  {Response} res Ответ сервера в JSON ( {"тип": "тип", "катег": "катег"}).
    */
    function removeCat(user, type, cat, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$pull: getObj('categories.' + type, cat)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.end(JSON.stringify({
                                        "type": type,
                                        "cat": cat
                                    }));
                                }
                            });
                    }
                });
            }
        });
    }

    /**
    * Добавление новой операции.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {String} type Тип удаляемой категории (accounts / gain / send.
    * @param  {Object} data Данные операции (Дата, счет, категория, сумма, комментарий).
    * @param  {Response} res Ответ сервера в JSON (data).
    */
    function newOper(user, type, data, res) {
        data = JSON.parse(data);
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$set: getObj('history.' + type + '.' + data.id, data)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.end(JSON.stringify(data));
                                }
                            });
                    }
                });
            }
        });
    }

    /**
    * Удаление операции.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {String} type Тип удаляемой категории (accounts / gain / send.
    * @param  {Int}    id   Ключ-ссылка на объект с данными об операции
    * @param  {Response} res Ответ сервера (id) для удаления по ключу на клиенте
    */
    function removeOper(user, type, id, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$unset: getObj('history.' + type + '.' +id)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.end(id);
                                }
                            });
                    }
                });
            }
        });
    }

    /**
    * Смена основной валюты и конвертация операций по коллекции.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {String} curr Основная валюта.
    * @param  {String} price Курс для новой основной валюты, на который нужно поделить текущие суммы.
    * @param  {Response} res Ответ сервера (JSON) проконвертированные операции.
    */
    function changeCurr(user, curr, price, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                     if (!err) {
                         collection.update({name: user}, {$set: {mainCurr: curr}}, function(err, result) {
                             if (!err) {
                                 collection.findOne({name: user}, {fields: {history: 1, currency: 1, _id: 0}}, function(err, docs){
                                     if (!err) {
                                         var key, key2,
                                             type, operation,
                                             history = docs.history;
                                         for (key in history) {
                                             type = history[key];
                                             for (key2 in type) {
                                                 operation = type[key2];
                                                 operation.sum = operation.sum / price;
                                             }
                                         }
                                         collection.update({name: user},
                                             {$set: getObj('history', history)},
                                             function(err, result) {
                                                 if (!err) {
                                                     history['mainCurr'] = curr;
                                                     history['currency'] = docs.currency;
                                                     db.close();
                                                     res.end(JSON.stringify(history));
                                                 }
                                             });
                                     }
                                 });
                             }
                         });
                     }
                });
            }
        });
    }

    /**
    * Установка основной валюты.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {JSON} valuta Валюта
    * @param  {Response} res Ответ сервера
    */
    function setMainCurr(user, valuta, res) {
        db.open(function(err, db) {
            db.collection('users', function(err, collection) {
                if (!err) {
                    collection.findOne({name: user }, {fields: { mainCurr: 1, currency: 1, _id: 0} }, function(err, docs) {
                        if (!err) {
                            function setMainCurr(dataCurr) {
                                var mainCurr = docs.mainCurr,
                                    currency = docs.currency,
                                    mainValues, valuta,
                                    elem, key, j;

                                currency[mainCurr] = dataCurr;
                                mainValues = currency[mainCurr];

                                for (key in mainValues) {
                                    elem = currency[key];
                                    valuta = 1 / mainValues[key];
                                    elem[mainCurr] = valuta;
                                    for (j in elem) {
                                        if (j !== mainCurr) {
                                            elem[j] = valuta * mainValues[j];
                                        }
                                    }
                                }
                                return currency;
                            }

                            collection.update({name: user}, {$set: {currency: setMainCurr(JSON.parse(valuta))}}, function(err, result) {
                                if(!err) {
                                    db.close();
                                    res.end('1');
                                }
                            });
                        }
                    });
                }
            });
        });
    }

    /**
    * Фильтр по датам в статистике.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {Int} start Дата в миллисекундах с которой отбирать.
    * @param  {Int} end Дата в миллисекундах lдо которой отбирать.
    * @param  {Response} res Ответ сервера (JSON с данными).
    * @param  {Object} obj Объект.
    */
    function dateFilter(user, start, end, res, obj) {
        function filter (doc) {
            var history = doc.history ? doc.history : doc,
                elem, operation, key, key1,
                obj = {
                    'gain': [],
                    'costs': [],
                    'send': []
                };
            for (key in obj) {
                elem = history[key];
                for (key1 in elem) {
                    operation = elem[key1];
                    if (operation.time >= start && operation.time <= end) {
                        obj[key].push(operation);
                    }
                }
            }
            return obj;
        }
        if (obj) {
           return filter(obj);
        }
        db.open(function(err, db) {
            db.collection('users', function(err, collection) {
                if (!err) {
                    collection.findOne({name: user}, {fields: {history: 1}},function(err, doc){
                        if (err) {
                            console.log('err = ' + err)
                        }
                        else {
                            db.close();
                            res.end(JSON.stringify(filter(doc)));
                        }
                    });
                }
            });
        });
    }

    /**
    * Фильтр по истории операций.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {String} account СЧЕТ.
    * @param  {Response} res Ответ сервера (JSON с данными).
    * @param  {String} type Тип фильтра.
    * @param  {String} start Дата в миллисекундах с которой отбирать (НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР)
    * @param  {String} end Дата в миллисекундах до которой отбирать (НЕОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР)
    */
    function historyFilter (user, account, res, type, start, end) {
        db.open(function(err, db) {
            db.collection('users', function(err, collection) {
                if (!err) {
                    collection.findOne({name: user}, {fields: {history: 1}},function(err, doc){
                        if (!err) {
                            var history = doc.history,
                                obj = {}, key, category, key2, operation;
                            if (account === 'all') {
                                if (type === 'all') {
                                    obj = history;
                                }
                                else {
                                    obj = getObj(type, history[type]);
                                }
                                if (start !== 'undefined' && end !== 'undefined') {
                                    obj = dateFilter(undefined, start, end, undefined, obj);
                                }
                                db.close();
                                res.end(JSON.stringify(obj));
                                return;
                            }

                            switch (type) {
                                case 'gain':
                                    obj['gain'] = [];
                                    break;
                                case 'costs':
                                    obj['costs'] = [];
                                    break;
                                case 'send':
                                    obj['send'] = [];
                                    break;
                                default :
                                    obj['gain'] = [];
                                    obj['costs'] = [];
                                    obj['send'] = [];
                                    break;

                            }
                            if (start === 'undefined' && end === 'undefined') {
                                for (key in obj) {
                                    category = history[key];
                                    for (key2 in category) {
                                        operation = category[key2];
                                        if (operation.sch === account) {
                                            obj[key].push(operation);
                                        }
                                    }
                                }
                            }
                            else {
                                for (key in obj) {
                                    category = history[key];
                                    for (key2 in category) {
                                        operation = category[key2];
                                        if (operation.sch === account && operation.time >= start && operation.time <= end) {
                                            obj[key].push(operation);
                                        }
                                    }
                                }
                            }

                            db.close();
                            res.end(JSON.stringify(obj));
                        }
                    });
                }
            });
        });
    }

    /**
    * Создание динамического объекта для передачи параметра как свойства при записи в коллекции.
    *
    * @param  {String} key Ключ объекта.
    * @param  {String} data Значение ключа объекта.
    * @return  {Object} Объект {key: data}.
    */
    function getObj(key, data) {
        var obj = {};
           obj[key] = data;
           return obj;
    }

    /**
    * Создание сессии.
    *
    * @param  {String} user Имя/логин пользователя.
    * @param  {String} sha cookie.
    * @param {Int} end Время в миллисекундах 30 числа, текущего месяца.
    * @param  {Response} res Ответ сервера.
    */
    function createSession(user, sha) {
        db.open(function(err,db) {
            db.createCollection('session', function(err, collection) {
                if (!err) {
                    collection.update({login: user},{$set: {session: sha}}, {upsert: true}, function(err, result) {
                        if (!err) {
                            db.close();
                        }
                    });
                }
            });
        });
    }

    /**
    * Проверка сессии и автоавторизация.
    *
    * @param  {String} sha cookie.
    * @param  {Int} start Время в миллисекундах 01 числа, текущего месяца.
    * @param  {Int} end Время в миллисекундах 30 числа, текущего месяца.
    * @param  {Response} res Ответ сервера.
    */
    function checkSession(sha, start, end, res) {
        db.open(function(err, db) {
            db.collection('session', function(err, collection) {
                if (!err) {
                    collection.findOne({session: sha}, function(err, docs) {
                        if (!err && docs !== null) {
                            db.collection('users', function(err, collection1) {
                                if (!err) {
                                    collection1.findOne({name: docs.login}, function(err, docs) {
                                        if (!err && docs !== null) {
                                            db.close();
                                            res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8'});
                                            docs.history = dateFilter(undefined, start, end, undefined, docs);
                                            res.end(JSON.stringify(docs));
                                        }
                                    });
                                }
                            });
                        }
                    });
                }
            });
        });
    }

    /**
    * Удаление сессии.
    *
    * @param  {String} sha cookie.
    * @param  {Response} res Ответ сервера.
    */
    function removerSession (sha, res) {
        db.open(function(err, db) {
            db.collection('session', function(err, collection) {
                collection.remove({session: sha}, function(err, result) {
                    db.close();
                    res.writeHead(200, {'Content-Type': 'text/html; charset=utf-8',
                        'Set-Cookie': 'controls=deleted' +
                                      ';path=/;expires=' + (new Date()).toGMTString() +
                                      'HttpOnly'});
                    res.end();
                });
            });
        });
    }


    return {
        reg: reg,
        auth: auth,
        changeCurr: changeCurr,
        newCat: newCat,
        renameCat: renameCat,
        removeCat: removeCat,
        setMainCurr: setMainCurr,
        newOper: newOper,
        removeOper: removeOper,
        dateFilter: dateFilter,
        historyFilter: historyFilter,
        checkSession: checkSession,
        removeSession: removerSession
    }
})();

module.exports = requests;
