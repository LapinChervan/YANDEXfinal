var newUser = require('User'),
	util = require('util'),
	mongodb = require('mongodb'),
	db = new mongodb.Db('exampleDb', new mongodb.Server('localhost', 27017, {}), {safe: true});

var requests = (function() {
    var allUsers = {};

	function reg(user, password) {
		db.open(function(err, db) {
			if (!err) {
				console.log('open...');
				db.createCollection('users', function(err, collection) {
					//collection.remove(null, function(err, result) {
						if (!err) {
                            collection.findOne({name: user}, function(err, docs) {
                                if (!err && docs == null) {
                                    collection.insert(new newUser(user, password), function(err, result) {
                                        if (err) {
                                            console.log(err);
                                        } else {
                                            collection.find().toArray(function(err, docs) {
                                                console.log(util.inspect(docs));
                                                db.close();
                                            });
                                        }
                                    });
                                }
                                else {
                                    console.log('юзер создан');
                                    db.close();
                                }
                            });
						}
					//});
				});
			}
		});
	}

    function auth (user, password, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function (err, collection) {
                    if (!err) {
                        collection.findOne({name: user, password: password},
                                           {fields: {total: 0, password: 0, _id: 0}},
                                           function(err, docs) {

                            if (!err && docs != null) {
                                allUsers[user] = extendDeep(newUser.prototype, docs);
                                res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                console.log(docs);
                                res.end(JSON.stringify(docs));
                            }
                            else {
                                res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                res.end('0');
                            }
                            db.close();
                        });
                    }
                });
            }
        });
    }

    function newCat(user, type, cat, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        if (type === 'gain') {
                            collection.update({name: user},
                                {$addToSet: {'categories.gain': cat}},
                                function(err, result) {
                                    if (!err) {
                                        allUsers[user].newCategory(type, cat);
                                        console.log(result);
                                        db.close();
                                        res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                        res.end('CatFor__GAIN__IsWrite');
                                    }
                                });
                        }

                        if (type === 'costs') {
                            collection.update({name: user},
                                {$addToSet: {'categories.costs': cat}},
                                function(err, result) {
                                    if (!err) {
                                        allUsers[user].newCategory(type, cat);
                                        console.log(result);
                                        db.close();
                                        res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                        res.end('CatFor__COSTS__IsWrite');
                                    }
                                });
                        }

                        if (type === 'accounts') {
                            collection.update({name: user},
                                {$addToSet: {'categories.accounts': cat}},
                                function(err, result) {
                                    if (!err) {
                                        allUsers[user].newCategory(type, cat);
                                        console.log(result);
                                        db.close();
                                        res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                        res.end('CatFor__ACCOUNTS__IsWrite');
                                    }
                                });
                        }
                    }
                });
            }
        });
    }

    function changeCurr(user, curr, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                                          {$set: {mainCurr: curr}},
                                          function(err, result) {
                            if (!err) {
                                allUsers[user].changeMainCurr(curr);
                                db.close();
                                res.end(); //TODO в случае ошибки вывести леер и вернуть инпут в обратное положение чекед
                            }
                        });
                    }
                });
            }
        });
    }

    function setMainCurr(user, valuta, res) {
        //todo изменение валюты?
        db.open(function(err, db) {
            db.collection('users', function(err, collection) {
                if (!err) {
                    var userObj = allUsers[user],
                        main = userObj.mainCurr;
                    allUsers[user].currency[main].price = JSON.parse(valuta);
                    recalculate(user, main, userObj);
                    collection.update({name: user}, {$set: {currency: allUsers[user].currency}}, function(err, result) {
                        if(!err) {
                            db.close();
                            res.end('1');
                        }
                    });
                }
            });
        });
    }

    function recalculate (mainCurr, userObj) {
        var currency = userObj.currency,
            mainVal = currency[mainCurr].price,
            elem, key, valuta;
        for (key in mainVal) {
            elem = currency[key].price;
            valuta = 1 / mainVal[key];
            elem[mainCurr] = valuta;
                for (var j in elem) {
                    if (j !== mainCurr) {
                        elem[j] = valuta * mainVal[j];
                    }
                }
        }
    }

    function extendDeep(parent, child) { // TODO возможно стоит пересмотреть наследование
        var i,
            toStr = Object.prototype.toString,
            astr = '[object Array]';
        child = child || {};
        for (i in parent) {
            if (parent.hasOwnProperty(i)) {
                if (typeof parent[i] === 'object') {
                    child[i] = (toStr.call(parent[i]) === astr) ? [] : {};
                    extendDeep(parent[i], child[i]);
                } else {
                    child[i] = parent[i];
                }
            }
        }
        return child;
    }

    function newGain(user, data, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$addToSet: {'history.gain': data}},
                            function(err, result) {
                                if (!err) {
                                  //  allUsers[user].newCategory(type, cat);
                                    db.close();
                                    res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                    res.end('new__GAIN__isWrite');
                                }
                            });
                    }
                });
            }
        });
    }

	return {
		reg: reg,
        auth: auth,
        changeCurr: changeCurr,
        newCat: newCat,
        setMainCurr: setMainCurr,
        newGain: newGain
	}
})();

module.exports = requests;