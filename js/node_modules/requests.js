var newUser = require('User'),
	util = require('util'),
	mongodb = require('mongodb'),
	db = new mongodb.Db('exampleDb', new mongodb.Server('localhost', 27017, {}), {safe: true});

var requests = (function() {
    var allUsers = {};

	function reg(user, password, res) {
		db.open(function(err, db) {
			if (!err) {
				console.log('open...');
				db.createCollection('users', function(err, collection) {
					//collection.remove(null, function(err, result) {
						if (!err) {
                            collection.findOne({name: user}, function(err, docs) {
                                if (!err && docs == null) {
                                    collection.insert(new newUser(user, password), function(err, result) {
                                        if (err) {
                                            console.log(err);
                                        } else {
                                            collection.find().toArray(function(err, docs) {
                                                console.log(util.inspect(docs));
                                                db.close();
                                                res.end('0');
                                            });
                                        }
                                    });
                                }
                                else {
                                    console.log('юзер создан');
                                    db.close();
                                    res.end('1');
                                }
                            });
						}
					//});
				});
			}
		});
	}

    function auth (user, password, start, end, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function (err, collection) {
                    if (!err) {
                        collection.findOne({name: user, password: password},
                                           {fields: {total: 0, password: 0, _id: 0}},
                                           function(err, docs) {

                            if (!err && docs != null) {
                                allUsers[user] = extendDeep(newUser.prototype, docs);
                                docs.history = dateFilter(undefined, start, end, undefined, docs);
                                res.end(JSON.stringify(docs));
                            }
                            else {
                                res.end('0');
                            }
                            db.close();
                        });
                    }
                });
            }
        });
    }

    function newCat(user, type, cat, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$addToSet: getObj('categories.' + type, cat)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.end(JSON.stringify({
                                        "type": type,
                                        "cat": cat
                                    }));
                                }
                            });
                    }
                });
            }
        });
    }

    function renameCat(data, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: data.login},
                            {$pull: getObj('categories.' + data.type, data.old)},
                            function(err, result) {
                                if (!err) {
                                    console.log('old category is remove');
                                }
                            });

                        collection.update({name: data.login},
                            {$addToSet: getObj('categories.' + data.type, data.new)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.end(JSON.stringify({
                                        "type": data.type,
                                        "oldName": data.old,
                                        "newName": data.new
                                    }));
                                }
                            });
                    }
                });
            }
        });
    }

    function removeCat(user, type, cat, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$pull: getObj('categories.' + type, cat)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.end(JSON.stringify({
                                        "type": type,
                                        "cat": cat
                                    }));
                                }
                            });
                    }
                });
            }
        });
    }

    function newOper(user, type, data, res) {
        data = JSON.parse(data);
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$set: getObj('history.' + type + '.' + data.id, data)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.end(JSON.stringify(data));
                                }
                            });
                    }
                });
            }
        });
    }

    function removeOper(user, type, id, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$unset: getObj('history.' + type + '.' +id)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.end(id);
                                }
                            });
                    }
                });
            }
        });
    }

    function changeCurr(user, curr, price, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                     if (!err) {
                               collection.update({name: user},
                                          {$set: {mainCurr: curr}},
                                          function(err, result) {
                            if (!err) {
                                allUsers[user].changeMainCurr(curr);

                                collection.findOne({name: user}, {fields: {history: 1}}, function(err, doc){
                                    if (!err) {
                                        var history = doc.history,
                                            key, key2, key3,
                                            type, operation;

                                        for (key in history) {
                                            type = history[key];
                                            for (key2 in type) {
                                                operation = type[key2];
                                                operation.sum = Math.round(operation.sum / price * 100) / 100;
                                            }
                                        }
                                        history['mainCurr'] = curr;
                                        collection.update({name: user},
                                            {$set: getObj('history', history)},
                                            function(err, result) {
                                                if (!err) {
                                                    db.close();
                                                    allUsers[user].history = history;
                                                    res.end(JSON.stringify(allUsers[user]));
                                                }
                                            });
                                    }
                                });
                            }
                        });
                     }
                });
            }
        });
    }

    function setMainCurr(user, valuta, res) {
        db.open(function(err, db) {
            db.collection('users', function(err, collection) {
                if (!err) {
                    var userObj = allUsers[user];
                    userObj.setMainCurr(JSON.parse(valuta));
                    collection.update({name: user}, {$set: {currency: userObj.currency}}, function(err, result) {
                        if(!err) {
                            db.close();
                            res.end('1');
                        }
                    });
                }
            });
        });
    }

    function dateFilter(user, start, end, res, obj) {
        function filter (doc) {
            var history = doc.history ? doc.history : doc,
                elem, operation, key, key1,
                obj = {
                    'gain': [],
                    'costs': [],
                    'send': []
                };
            for (key in obj) {
                elem = history[key];
                for (key1 in elem) {
                    operation = elem[key1];
                    if (operation.time >= start && operation.time <= end) {
                        obj[key].push(operation);
                    }
                }
            }
            return obj;
        }
        if (obj) {
           return filter(obj);
        }
        db.open(function(err, db) {
            db.collection('users', function(err, collection) {
                if (!err) {
                    collection.findOne({name: user}, {fields: {history: 1}},function(err, doc){
                        if (err) {
                            console.log('err = ' + err)
                        }
                        else {
                            res.end(JSON.stringify(filter(doc)));
                            db.close();
                        }
                    });
                }
            });
        });
    }

    function historyFilter (user, account, res, type, start, end) {
        db.open(function(err, db) {
            db.collection('users', function(err, collection) {
                if (!err) {
                    collection.findOne({name: user}, {fields: {history: 1}},function(err, doc){
                        if (!err) {
                            var history = doc.history,
                                obj = {}, key, category, key2, operation;
                            if (account === 'all') {
                                if (type === 'all') {
                                    obj = history;
                                }
                                else {
                                    obj = getObj(type, history[type]);
                                }
                                if (start !== 'undefined' && end !== 'undefined') {
                                    obj = dateFilter(undefined,start,end,undefined,obj);
                                }
                                db.close();
                                res.end(JSON.stringify(obj));
                                return;
                            }

                            switch (type) {
                                case 'gain':
                                    obj['gain'] = [];
                                    break;
                                case 'costs':
                                    obj['costs'] = [];
                                    break;
                                case 'send':
                                    obj['send'] = [];
                                    break;
                                default :
                                    obj['gain'] = [];
                                    obj['costs'] = [];
                                    obj['send'] = [];
                                    break;

                            }
                            if (start === 'undefined' && end === 'undefined') {
                                for (key in obj) {
                                    category = history[key];
                                    for (key2 in category) {
                                        operation = category[key2];
                                        if (operation.sch === account) {
                                            obj[key].push(operation);
                                        }
                                    }
                                }
                            }
                            else {
                                for (key in obj) {
                                    category = history[key];
                                    for (key2 in category) {
                                        operation = category[key2];
                                        if (operation.sch === account && operation.time >= start && operation.time <= end) {
                                            obj[key].push(operation);
                                        }
                                    }
                                }
                            }

                            db.close();
                            res.end(JSON.stringify(obj));
                        }
                    });
                }
            });
        });
    }

    function extendDeep(parent, child) {
        var i,
            toStr = Object.prototype.toString,
            astr = '[object Array]';
        child = child || {};
        for (i in parent) {
            if (parent.hasOwnProperty(i)) {
                if (typeof parent[i] === 'object') {
                    child[i] = (toStr.call(parent[i]) === astr) ? [] : {};
                    extendDeep(parent[i], child[i]);
                } else {
                    child[i] = parent[i];
                }
            }
        }
        return child;
    }

    function getObj(key, data) {
        var obj = {};
           obj[key] = data;
           return obj;
    }

	return {
		reg: reg,
        auth: auth,
        changeCurr: changeCurr,
        newCat: newCat,
        renameCat: renameCat,
        removeCat: removeCat,
        setMainCurr: setMainCurr,
        newOper: newOper,
        removeOper: removeOper,
        dateFilter: dateFilter,
        historyFilter: historyFilter
	}
})();

module.exports = requests;
