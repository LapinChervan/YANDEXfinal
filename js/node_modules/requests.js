var newUser = require('User'),
	util = require('util'),
	mongodb = require('mongodb'),
	db = new mongodb.Db('exampleDb', new mongodb.Server('localhost', 27017, {}), {safe: true});

var requests = (function() {
    var allUsers = {};

	function reg(user, password) {
		db.open(function(err, db) {
			if (!err) {
				console.log('open...');
				db.createCollection('users', function(err, collection) {
					collection.remove(null, function(err, result) {
						if (!err) {
                            collection.findOne({name: user}, function(err, docs) {
                                if (!err && docs == null) {
                                    collection.insert(new newUser(user, password), function(err, result) {
                                        if (err) {
                                            console.log(err);
                                        } else {
                                            collection.find().toArray(function(err, docs) {
                                                console.log(util.inspect(docs));
                                                db.close();
                                            });
                                        }
                                    });
                                }
                                else {
                                    console.log('юзер создан');
                                    db.close();
                                }
                            });
						}
					});
				});
			}
		});
	}

    function auth (user, password, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function (err, collection) {
                    if (!err) {
                        collection.findOne({name: user, password: password},
                                           {fields: {total: 0, password: 0, _id: 0}},
                                           function(err, docs) {

                            if (!err && docs != null) {
                                allUsers[user] = extendDeep(newUser.prototype, docs);
                                res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                console.log(docs);
                                res.end(JSON.stringify(docs));
                            }
                            else {
                                res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                res.end('0');
                            }
                            db.close();
                        });
                    }
                });
            }
        });
    }

    function newCat(user, type, cat, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$addToSet: getObj('categories.' + type, cat)},
                            function(err, result) {
                                if (!err) {
                                 //   allUsers[user].newCategory(type, cat);
                                    db.close();
                                    res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                    res.end(JSON.stringify({
                                        "type": type,
                                        "cat": cat
                                    }));
                                }
                            });
                    }
                });
            }
        });
    }

    function renameCat(data, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: data.login},
                            {$pull: getObj('categories.' + data.type, data.old)},
                            function(err, result) {
                                if (!err) {
                                    console.log('old category is remove');
                                }
                            });

                        collection.update({name: data.login},
                            {$addToSet: getObj('categories.' + data.type, data.new)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                    res.end(JSON.stringify({
                                        "type": data.type,
                                        "old": data.old,
                                        "new": data.new
                                    }));
                                }
                            });
                    }
                });
            }
        });
    }

    function removeCat(user, type, cat, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$pull: getObj('categories.' + type, cat)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                    res.end(JSON.stringify({
                                        "type": type,
                                        "cat": cat
                                    }));
                                }
                            });
                    }
                });
            }
        });
    }

    function newOper(user, type, id, data, res) {
        data = JSON.parse(data);
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$addToSet: getObj('history.' + type + '.' + id, data)},
                            function(err, result) {
                                if (!err) {
                                    db.close();
                                    res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                    res.end(JSON.stringify(data));
                                }
                            });
                    }
                });
            }
        });
    }

    function removeOper(user, type, id, res) {
        var data = JSON.parse(json);
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                            {$unset: getObj('history.' + type, id)},
                            function(err, result) {
                                if (!err) {
                                    console.log(result);
                                    db.close();
                                    res.writeHead(200, {'Content-Type': 'text/plain; charset=utf8', 'Access-Control-Allow-Origin': '*'});
                                    res.end(id);
                                }
                            });
                    }
                });
            }
        });
    }

    function changeCurr(user, curr, res) {
        db.open(function(err, db) {
            if (!err) {
                db.collection('users', function(err, collection) {
                    if (!err) {
                        collection.update({name: user},
                                          {$set: {mainCurr: curr}},
                                          function(err, result) {
                            if (!err) {
                                allUsers[user].changeMainCurr(curr);
                                db.close();
                                res.end(JSON.stringify(allUsers[user])); //TODO в случае ошибки вывести леер и вернуть инпут в обратное положение чекед
                            }
                        });
                    }
                });
            }
        });
    }

    function setMainCurr(user, valuta, res) {
        //todo изменение валюты?
        db.open(function(err, db) {
            db.collection('users', function(err, collection) {
                if (!err) {
                    var userObj = allUsers[user];
                    userObj.setMainCurr(JSON.parse(valuta));
                    collection.update({name: user}, {$set: {currency: userObj.currency}}, function(err, result) {
                        if(!err) {
                            db.close();
                            res.end('1');
                        }
                    });
                }
            });
        });
    }

   /* function findOperation(user, time) {
        db.open(function(err, db) {
            db.collection('users', function(err, collection) {
                if (!err) {
                    collection.find({name: user, 'history.gain.date':time })
                }
            });
        });
    }*/

    function extendDeep(parent, child) { // TODO возможно стоит пересмотреть наследование
        var i,
            toStr = Object.prototype.toString,
            astr = '[object Array]';
        child = child || {};
        for (i in parent) {
            if (parent.hasOwnProperty(i)) {
                if (typeof parent[i] === 'object') {
                    child[i] = (toStr.call(parent[i]) === astr) ? [] : {};
                    extendDeep(parent[i], child[i]);
                } else {
                    child[i] = parent[i];
                }
            }
        }
        return child;
    }

    function getObj(key, data) {
        var obj = {};
           obj[key] = data;
           return obj;
    }

	return {
		reg: reg,
        auth: auth,
        changeCurr: changeCurr,
        newCat: newCat,
        renameCat: renameCat,
        removeCat: removeCat,
        setMainCurr: setMainCurr,
        newOper: newOper,
        removeOper: removeOper
	}
})();

module.exports = requests;
